blueprint:
  name: Night Blinds
  description: >
    Open and close window blinds based on the time of day, and whether anyone is
    asleep.
  author: Scott James Remnant <scott@netsplit.com>
  domain: automation
  input:
    daytime:
      name: Daytime Scene
      description: This scene will be set during the daytime.
      selector:
        entity:
          filter:
            - domain: scene
    nighttime:
      name: Nighttime Scene
      description: This scene will be set during the nighttime.
      selector:
        entity:
          filter:
            - domain: scene
    window:
      name: Window
      description: >
        Blinds will not be closed until this sensor detects that the windows
        are closed.
      selector:
        entity:
          filter:
            - domain: binary_sensor
              device_class: window
    playing:
      name: Playing
      description: Blinds will not be opened while this input is on.
      selector:
        entity:
          filter:
            - domain: input_boolean
      default: null

mode: queued

trigger_variables:
  playing: !input playing

triggers:
  # Update blinds at sunset and sunrise.
  - trigger: state
    entity_id: sensor.weather
    to: "night"
  - trigger: state
    entity_id: sensor.weather
    from: "night"
    not_to: "unavailable"
  # Update blinds when we wake up or go to sleep.
  - trigger: state
    entity_id: binary_sensor.scotty_asleep
    to:
      - "on"
      - "off"
  # Update blinds when the windows are closed.
  - trigger: state
    entity_id: !input window
    to: "off"
    for:
      seconds: 3
  # Update blinds when we're playing.
  - trigger: template
    value_template: "{{ playing is not none and is_state(playing, 'on') }}"
  - trigger: template
    value_template: "{{ playing is not none and is_state(playing, 'off') }}"

variables:
  playing: !input playing

actions:
  - choose:
      # Open blinds during the day.
      - conditions:
          - not:
              - condition: state
                entity_id: sensor.weather
                state: "night"
          # Unless someone is sleeping.
          - condition: state
            entity_id: binary_sensor.scotty_asleep
            state: "off"
          # Unless we're playing.
          - "{{ playing is none or is_state(playing, 'off') }}"
        sequence:
          - action: scene.turn_on
            target:
              entity_id: !input daytime

      # Close blinds when we go to sleep during the day.
      - conditions:
          - not:
              - condition: state
                entity_id: sensor.weather
                state: "night"
          - condition: state
            entity_id: binary_sensor.scotty_asleep
            state: "on"
          # Only when the windows are closed.
          - condition: state
            entity_id: !input window
            state: "off"
        sequence:
          - action: scene.turn_on
            target:
              entity_id: !input nighttime

      # Close blinds while we're playing.
      - conditions:
          - "{{ playing is not none and is_state(playing, 'on') }}"
          # Only when the windows are closed.
          - condition: state
            entity_id: !input window
            state: "off"
        sequence:
          - action: scene.turn_on
            target:
              entity_id: !input nighttime

      # Close blinds at night.
      - conditions:
          - condition: state
            entity_id: sensor.weather
            state: "night"
          # Only when the windows are closed.
          - condition: state
            entity_id: !input window
            state: "off"
        sequence:
          - action: scene.turn_on
            target:
              entity_id: !input nighttime
